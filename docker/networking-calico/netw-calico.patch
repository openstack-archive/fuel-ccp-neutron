diff --git a/networking_calico/agent/dhcp_agent.py b/networking_calico/agent/dhcp_agent.py
index 110730d..1f39e15 100644
--- a/networking_calico/agent/dhcp_agent.py
+++ b/networking_calico/agent/dhcp_agent.py
@@ -16,6 +16,7 @@
 
 import etcd
 import logging
+import netaddr
 import os
 import socket
 import sys
@@ -74,13 +75,45 @@ class FakePlugin(object):
 
     """
 
+    def __init__(self, etcd):
+        self.etcd = etcd
+
     def create_dhcp_port(self, port):
         """Support the following DHCP DeviceManager calls.
 
         dhcp_port = self.plugin.create_dhcp_port({'port': port_dict})
         """
+        fixed_ips = []
+        try:
+            result = self.etcd.client.read(
+                SUBNET_DIR, recursive=True, timeout=5)
+            if result and getattr(result, "children", None):
+                nodes = result.children
+                for node in nodes:
+                    subnet_id = node.key.split("/")[-1]
+                    subnet = safe_decode_json(node.value)
+                    # {"gateway_ip": "10.65.0.1",
+                    #  "cidr": "10.65.0.0/24",
+                    #  "host_routes": []}
+                    if not (isinstance(subnet, dict) and
+                            'cidr' in subnet and 'gateway_ip' in subnet):
+                        LOG.warning("Invalid subnet data: %s => %s",
+                                    node.value, subnet)
+                    elif subnet['gateway_ip'] is None:
+                        network = netaddr.IPNetwork(subnet['cidr'])
+                        fixed_ips.append({
+                            'subnet_id': subnet_id,
+                            'ip_address': str(network[1])
+                        })
+                LOG.debug("subnet_: fixed_ips: {}".format(fixed_ips))
+            else:
+                LOG.warning("subnet_: no result")
+        except etcd.EtcdKeyNotFound:
+            LOG.warning("subnet_: no data")
+
         LOG.debug("create_dhcp_port: %s", port)
         port['port']['id'] = 'dhcp'
+        port['port']['fixed_ips'] = fixed_ips
 
         # The following MAC address will be assigned to the Linux dummy
         # interface that
@@ -513,14 +546,14 @@ class CalicoDhcpAgent(DhcpAgent):
         # DnsmasqRouted class.
         self.dhcp_driver_cls = DnsmasqRouted
 
+        # Watch etcd for any endpoint changes for this host.
+        self.etcd = CalicoEtcdWatcher(self)
+
         # Override the RPC plugin (i.e. proxy to the Neutron database)
         # with a fake plugin.  The DHCP driver code calls when it
         # wants to tell Neutron that it is creating, updating or
         # releasing the DHCP port.
-        self.plugin_rpc = FakePlugin()
-
-        # Watch etcd for any endpoint changes for this host.
-        self.etcd = CalicoEtcdWatcher(self)
+        self.plugin_rpc = FakePlugin(self.etcd)
 
     def run(self):
         """Run the EtcdWatcher loop."""
