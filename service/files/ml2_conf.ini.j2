# ml2_conf.ini
[ml2]
# Changing type_drivers after bootstrap can lead to database inconsistencies
{% if neutron.plugin_agent == "calico" %}
type_drivers = local, flat
tenant_network_types = local
{% else %}
type_drivers = flat,vlan,vxlan
tenant_network_types = vxlan
{% endif %}

{% if neutron.plugin_agent == "openvswitch" %}
mechanism_drivers = openvswitch,l2population
{% elif neutron.plugin_agent == "linuxbridge" %}
mechanism_drivers = linuxbridge,l2population
{% elif neutron.plugin_agent == "calico" %}
mechanism_drivers = calico
{% endif %}

{% if neutron.enable_qos %}
extension_drivers = qos
{% endif %}

[ml2_type_vlan]
{% set arr=[] -%}
{% for net, opts in neutron.physnets.iteritems() -%}
{% if opts.vlan_range -%}
{% set arr = arr + [net + ":" + opts.vlan_range] -%}
{% endif -%}
{% endfor -%}
network_vlan_ranges = {{ arr|join(",") }}

[ml2_type_flat]
{% set arr=[] -%}
{% for net, opts in neutron.physnets.iteritems() -%}
{% if opts.flat -%}
{% set arr = arr + [net] -%}
{% endif -%}
{% endfor -%}
flat_networks = {{ arr|join(",") }}

[ml2_type_vxlan]
vni_ranges = 1:1000
vxlan_group = 239.1.1.1

[securitygroup]
{% if neutron.plugin_agent == "openvswitch" %}
firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
{% elif neutron.plugin_agent == "linuxbridge" %}
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
{% endif %}

{% if neutron.plugin_agent == "openvswitch" %}
[agent]
tunnel_types = vxlan
l2_population = true
arp_responder = true

[ovs]
ovsdb_interface = {{ neutron.ovsdb.interface }}
ovsdb_connection = {{ neutron.ovsdb.connection }}
{% set arr=[] -%}
{% for net, opts in neutron.physnets.iteritems() -%}
{% set arr = arr + [net + ":" + opts.bridge_name] -%}
{% endfor -%}
bridge_mappings = {{ arr|join(",") }}
{% elif neutron.plugin_agent == "linuxbridge" %}
[linux_bridge]
{% set arr=[] -%}
{% for net, opts in neutron.physnets.iteritems() -%}
{% set arr = arr.append(net + ":" + opts.interface) -%}
{% endfor -%}
physical_interface_mappings = {{ arr|join(",") }}

[vxlan]
l2_population = true
{% endif %}
local_ip = {{ network_topology["private"]["address"] }}

{% if neutron.plugin_agent == "calico" %}
[calico]
etcd_host = {{ neutron.calico.etcd_host }}
etcd_port = {{ neutron.calico.etcd_port.cont }}
{% endif %}
