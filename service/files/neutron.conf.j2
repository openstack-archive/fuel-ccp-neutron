# neutron.conf
[DEFAULT]
debug = {{ neutron.logging_debug }}

use_stderr = true
use_syslog = false

bind_host = {{ network_topology["private"]["address"] }}
bind_port = {{ neutron.server_port.cont }}

api_paste_config = /usr/share/neutron/api-paste.ini
endpoint_type = internalURL

metadata_proxy_socket = /var/lib/neutron/ccp/metadata_proxy

{% if neutron.plugin_agent == "openvswitch" %}
interface_driver = neutron.agent.linux.interface.OVSInterfaceDriver
{% elif neutron.plugin_agent == "linuxbridge" %}
interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
{% endif %}

allow_overlapping_ips = true
dhcp_agents_per_network = 2
core_plugin = {{ neutron.core_plugin }}
service_plugins = router{% if neutron.enable_lbaas %},neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2{% endif %}{% if neutron.enable_qos %},qos{% endif %}


# Enable HA mode for virtual routers. (boolean value)
l3_ha = {{ neutron.l3_ha }}

# If it is set to 0 then the ha router will be scheduled on every L3 agent.
max_l3_agents_per_router=0


{% if neutron.enable_lbaas %}
[service_providers]
service_provider = LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default
{% endif %}

[nova]
auth_url = {{ address('keystone', keystone.admin_port, with_scheme=True) }}
auth_type = password
project_domain_id = default
user_domain_id = default
region_name = RegionOne
project_name = service
username = {{ nova.db.username }}
password = {{ nova.db.password }}
endpoint_type = internal

[oslo_concurrency]
lock_path = /var/lib/neutron/tmp

[agent]
root_helper = sudo neutron-rootwrap /etc/neutron/rootwrap.conf
root_helper_daemon = sudo neutron-rootwrap-daemon /etc/neutron/rootwrap.conf

[database]
connection = mysql+pymysql://{{ neutron.db.username }}:{{ neutron.db.password }}@{{ address(service.database) }}/{{ neutron.db.name }}{% if percona.tls.enabled %}?ssl_ca=/opt/ccp/etc/tls/ca.pem{% endif %}
max_retries = -1
max_pool_size = {{ neutron.db.max_pool_size }}
max_overflow = {{ neutron.db.max_overflow }}

[keystone_authtoken]
auth_uri = {{ address('keystone', keystone.public_port, with_scheme=True) }}
auth_url = {{ address('keystone', keystone.admin_port, with_scheme=True) }}
auth_type = password
project_domain_id = default
user_domain_id = default
project_name = service
username = {{ neutron.db.username }}
password = {{ neutron.db.password }}
memcached_servers = {{ address('memcached', memcached.port) }}

{% if searchlight is defined and (searchlight.services.neutron or searchlight.services.nova) %}
[oslo_messaging_notifications]
driver = {{ searchlight.notification_driver }}
{% endif %}

{# messaging macros templates #}
{{ oslo_messaging[messaging.backend.notifications]('notifications_config') }}
{{ oslo_messaging[messaging.backend.rpc]('rpc_config') }}
